package org.anhvt.springbootpostgrebackend.exception;

import lombok.extern.slf4j.Slf4j;
import org.anhvt.springbootpostgrebackend.payload.response.APIResponse;
import org.anhvt.springbootpostgrebackend.utils.constant.ResponseCode;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import java.io.IOException;

@ControllerAdvice
@Slf4j
public class ExceptionAdvice {

    @ExceptionHandler(BusinessException.class)
    public ResponseEntity<APIResponse<ErrorResponse>> handleBusinessException(BusinessException ex) {
        log.error(String.format("BusinessException error: %s %s %s", ex.getCode(), ex.getMessage()));
        ErrorResponse errorResponse = new ErrorResponse(ex.getCode(), ex.getMessage());
        APIResponse<ErrorResponse> apiResponse = APIResponse.<ErrorResponse>builder()
                .status(ResponseCode.SERVER_ERROR.getCode())
                .message(ResponseCode.SERVER_ERROR.getMessage())
                .response(errorResponse)
                .build();
        return new ResponseEntity<>(apiResponse, HttpStatus.UNAVAILABLE_FOR_LEGAL_REASONS);
    }

    @ExceptionHandler(SystemException.class)
    public ResponseEntity<APIResponse<ErrorResponse>> handleSystemException(SystemException ex) {
//        ErrorResponse errorResponse = new ErrorResponse(ex.getMessage(), "SYSTEM_ERROR");
//        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
        ErrorResponse errorResponse = new ErrorResponse(ex.getCode(), ex.getMessage());
        APIResponse<ErrorResponse> apiResponse = APIResponse.<ErrorResponse>builder()
                .status(ResponseCode.SERVER_ERROR.getCode())
                .message(ResponseCode.SERVER_ERROR.getMessage())
                .response(errorResponse)
                .build();
        return new ResponseEntity<>(apiResponse, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    // Xử lý các exception khác
    @ExceptionHandler(Exception.class)
    public ResponseEntity<APIResponse<ErrorResponse>> handleGenericException(Exception ex) {
        ErrorResponse errorResponse = new ErrorResponse(ex.getMessage(), "UNKNOWN_ERROR");
        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler
    public APIResponse<Object> handlerCommonException(ErrorResponse ex) {
        log.error(String.format("Common error: %s %s %s", ex.getCode(), ex.getStatus(), ex.getMessage()));
        return APIResponse.builder()
                .status(ResponseCode.SERVER_ERROR.getCode())
                .message(ResponseCode.SERVER_ERROR.getMessage())
                .response(ex.getMessage())
                .build();
    }

    @ExceptionHandler
    public APIResponse<Object> handlerException(Exception ex) {
        log.error(String.format("Common error: %s %s %s", ex.getClass(), ex.getCause(), ex.getMessage()));
        return APIResponse.builder()
                .status(ResponseCode.SERVER_ERROR.getCode())
                .message(ResponseCode.SERVER_ERROR.getMessage())
                .response(ex.getMessage())
                .build();
    }

    @ExceptionHandler
    public APIResponse<Object> handlerValidateException(IOException ex) {
        log.error(String.format("Validate error: %s %s %s", ex.getClass(), ex.getCause(), ex.getMessage()));
        return APIResponse.builder()
                .status(ResponseCode.BAD_REQUEST.getCode())
                .message(ResponseCode.BAD_REQUEST.getMessage())
                .response(ex.getMessage())
                .build();
    }

    @ExceptionHandler
    public APIResponse<Object> handlerUserException(UserException ex) {
        log.error(String.format("Validate error: %s %s %s", ex.getClass(), ex.getCause(), ex.getMessage()));
        return APIResponse.builder()
                .status(ResponseCode.NO_CONTENT.getCode())
                .message(ResponseCode.NO_CONTENT.getMessage())
                .response(ex.getMessage())
                .build();
    }
}
