version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-knowledge-portal-postgres
    environment:
      POSTGRES_DB: knowledge_portal
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for session caching
  redis:
    image: redis:7-alpine
    container_name: ai-knowledge-portal-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
      target: builder
    container_name: ai-knowledge-portal-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/knowledge_portal
      REDIS_URL: redis://redis:6379
      JWT_SECRET: development-secret-key
      JWT_EXPIRES_IN: 15m
      CORS_ORIGIN: http://localhost:5173
    ports:
      - "3000:3000"
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - postgres
      - redis

    command: npm run dev

  # Frontend Application
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      target: builder
    container_name: ai-knowledge-portal-frontend
    environment:
      VITE_API_BASE_URL: http://localhost:3000/api
      VITE_APP_NAME: AI Knowledge Portal
    ports:
      - "5173:5173"
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    depends_on:
      - backend

    command: npm run dev

  # Nginx reverse proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: ai-knowledge-portal-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: ai-knowledge-portal-network 