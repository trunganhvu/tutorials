// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username     String   @unique @db.VarChar(50)
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  role         Role     @default(USER)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  articles Article[]
  sessions Session[]

  @@map("users")
}

model Article {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String   @db.VarChar(255)
  content   String   @db.Text
  slug      String   @unique @db.VarChar(255)
  status    Status   @default(DRAFT)
  authorId  String   @map("author_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  author      User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  attachments FileAttachment[]

  @@map("articles")
}

model FileAttachment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  filename   String   @db.VarChar(255)
  s3Key      String   @map("s3_key") @db.VarChar(500)
  mimeType   String   @map("mime_type") @db.VarChar(100)
  fileSize   BigInt   @map("file_size")
  articleId  String   @map("article_id") @db.Uuid
  uploadedAt DateTime @default(now()) @map("uploaded_at") @db.Timestamptz(6)

  // Relations
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("file_attachments")
}

model Session {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  tokenHash String   @map("token_hash") @db.VarChar(255)
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  ADMIN
  USER
}

enum Status {
  DRAFT
  PUBLISHED
} 